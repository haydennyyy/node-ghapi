{"meta":{"generator":"0.0.1","format":19},"custom":{"Getting Started":{"name":"Getting Started","files":{"GettingStarted":{"name":"Getting Started","type":"md","content":"<!--\r\n Copyright (C) 2019 Hayden Young\r\n \r\n This file is part of node-ghapi.\r\n \r\n node-ghapi is free software: you can redistribute it and/or modify\r\n it under the terms of the GNU General Public License as published by\r\n the Free Software Foundation, either version 3 of the License, or\r\n (at your option) any later version.\r\n \r\n node-ghapi is distributed in the hope that it will be useful,\r\n but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n GNU General Public License for more details.\r\n \r\n You should have received a copy of the GNU General Public License\r\n along with node-ghapi.  If not, see <http://www.gnu.org/licenses/>.\r\n-->\r\n\r\n# Test\r\nPlaceholderrrrr!","path":"guides/Getting Started/GettingStarted.md"}}}},"classes":[{"name":"GitHubAPIClient","description":"The client connection","construct":{"name":"GitHubAPIClient","params":[{"name":"token","description":"Your GitHub OAuth API token. If unset, the client will only access public information.","optional":true,"type":[[["string"]]]}]},"methods":[{"name":"users","description":"Performs user-related interactions","examples":["await client.users('haydennyyy').raw;"],"params":[{"name":"username","description":"The username of the user to look up.","type":[[["string"]]]}],"returns":{"types":[[["User"]]],"description":"A user class"},"meta":{"line":25,"file":"index.js","path":"src"}},{"name":"repos","description":"Performs repository-related interactions","examples":["await client.repos('haydennyyy/node-ghapi')"],"params":[{"name":"expression","description":"The expression, formatted like owner/repo","type":[[["string"]]]}],"returns":{"types":[[["Repo"]]],"description":"A repository class"},"meta":{"line":36,"file":"index.js","path":"src"}},{"name":"orgs","description":"Performs organization-related interactions","examples":["await client.orgs('Microsoft');"],"params":[{"name":"organization","description":"The organization name","type":[[["string"]]]}],"returns":{"types":[[["Organization"]]],"description":"A repository class"},"meta":{"line":48,"file":"index.js","path":"src"}}],"meta":{"line":9,"file":"index.js","path":"src"}},{"name":"Organization","description":"Org interactivity.","construct":{"name":"Organization","params":[{"name":"name","description":"The name of the organization to get info on","type":[[["String"]]]},{"name":"token","description":"The token to authenticate with","type":[[["String"]]]}]},"props":[{"name":"raw","description":"The raw JSON from GET /orgs/:orgname","type":[[["Promise","<"],["*",">"]]],"meta":{"line":26,"file":"org.js","path":"src"}},{"name":"repos","description":"An array of all of the organization's repositories.","type":[[["Promise","<"],["*",">"]]],"meta":{"line":35,"file":"org.js","path":"src"}},{"name":"events","description":"An array of all of the organization's events.","type":[[["Promise","<"],["*",">"]]],"meta":{"line":44,"file":"org.js","path":"src"}},{"name":"hooks","description":"An array of all of the organization's webhooks.\r> NOTE: You cannot list, view, or edit webhooks which you did not create.","type":[[["Promise","<"],["*",">"]]],"meta":{"line":54,"file":"org.js","path":"src"}},{"name":"issues","description":"An array of all of the organization's issues.\r> NOTE: You cannot list, view, or edit issues which you did not create or own.","type":[[["Promise","<"],["*",">"]]],"meta":{"line":64,"file":"org.js","path":"src"}},{"name":"members","description":"An array of all of the organization's members.","type":[[["Promise","<"],["*",">"]]],"meta":{"line":73,"file":"org.js","path":"src"}},{"name":"publicMembers","description":"An array of all of the organization's public members.","type":[[["Promise","<"],["*",">"]]],"meta":{"line":82,"file":"org.js","path":"src"}}],"meta":{"line":7,"file":"org.js","path":"src"}},{"name":"RepositoryGit","description":"Repository-centric Git interactivity.","access":"protected","construct":{"name":"RepositoryGit","params":[{"name":"baseURL","description":"The base URL forwarded from the repo class","type":[[["string"]]]},{"name":"token","description":"The GitHub PAT (Personal Access Token) forwarded from the base client.","type":[[["string"]]]}]},"methods":[{"name":"blob","description":"Gets a blob from the git by file path. If path is a folder, will return blob for first file in folder.","examples":["await ghapi.repos('haydennyyy/node-ghapi').git.blob('index.js')","await ghapi.repos('haydennyyy/node-ghapi').git.blob('src/repo.js')"],"params":[{"name":"path","description":"The path of the file tto get the Blob for, formatted like 'folder/folder2/.../file.ext'","type":[[["String"]]]},{"name":"ref","description":"The name of the commit/branch/tag.","optional":true,"default":"'master'","type":[[["String"]]]}],"async":true,"meta":{"line":32,"file":"repo-git.js","path":"src"}},{"name":"getCommit","description":"Gets a commit from the git by commit SHA","params":[{"name":"sha","description":"The commit's SHA, taken from","type":[[["String"]]]}],"meta":{"line":47,"file":"repo-git.js","path":"src"}}],"meta":{"line":8,"file":"repo-git.js","path":"src"}},{"name":"Repo","description":"Repository interactivity.","access":"protected","construct":{"name":"Repo","params":[{"name":"expression","description":"The expression, formatted like owner/name","type":[[["string"]]]},{"name":"token","description":"The authentication token","type":[[["string"]]]}]},"props":[{"name":"raw","description":"Gets the raw JSON from the GitHub API Query. Must be run asynchronously.","type":[[["Promise","<"],["*",">"]]],"meta":{"line":27,"file":"repo.js","path":"src"}},{"name":"forks","description":"Gets a list of forks of the repository. Must be run asynchronously.","type":[[["Promise","<"],["*",">"]]],"meta":{"line":36,"file":"repo.js","path":"src"}},{"name":"assignees","description":"Gets a list of assignees of the repository. Must be run asynchronously.","type":[[["Promise","<"],["*",">"]]],"meta":{"line":45,"file":"repo.js","path":"src"}},{"name":"branches","description":"Gets a list of branches of the repository.","type":[[["Promise","<"],["*",">"]]],"meta":{"line":67,"file":"repo.js","path":"src"}},{"name":"comments","description":"Gets a list of comments of the repository.","type":[[["Promise","<"],["*",">"]]],"meta":{"line":76,"file":"repo.js","path":"src"}},{"name":"topics","description":"Gets a list of topics of the repository.","type":[[["Promise","<"],["*",">"]]],"meta":{"line":85,"file":"repo.js","path":"src"}},{"name":"languages","description":"Gets a list of languages of the repository.","type":[[["Promise","<"],["*",">"]]],"meta":{"line":94,"file":"repo.js","path":"src"}},{"name":"teams","description":"Gets a list of teams of the repository.","type":[[["Promise","<"],["*",">"]]],"meta":{"line":103,"file":"repo.js","path":"src"}},{"name":"tags","description":"Gets a list of tags of the repository.","type":[[["Promise","<"],["*",">"]]],"meta":{"line":112,"file":"repo.js","path":"src"}},{"name":"readme","description":"Gets the contents of the repository's README.","type":[[["Promise","<"],["*",">"]]],"meta":{"line":182,"file":"repo.js","path":"src"}},{"name":"latestRelease","description":"Gets the latest release forthe repository.","type":[[["Promise","<"],["*",">"]]],"meta":{"line":230,"file":"repo.js","path":"src"}}],"methods":[{"name":"getBlob","description":"Gets a blob from the repository.","examples":["await client.repos('haydennyyy/node-ghapi').getBlob('09a899b58254f1bf1f215c7cec348bb5b64af57b');"],"params":[{"name":"sha","description":"The SHA hash of the blob","type":[[["string"]]]}],"meta":{"line":58,"file":"repo.js","path":"src"}},{"name":"getArchive","description":"Gets archive of the repository , format and branch. Must be run asynchronously.","examples":["await client.repos('haydennyyy/node-ghapi').getArchive();","await client.repos('haydennyyy/node-ghapi').getArchive({format: 'zipball'});","await client.repos('haydennyyy/node-ghapi').getArchive({format: 'zipball', branch: 'somebranch'});","await client.repos('haydennyyy/node-ghapi').getArchive({branch: 'somebranch'});"],"params":[{"name":"options","description":"The options for the request.","optional":true,"type":[[["Object"]]]},{"name":"options.format","description":"The format for the request. Can be 'tarball' or 'zipball'.","optional":true,"default":"'tarball'","type":[[["String"]]]},{"name":"options.branch","description":"The branch to get the archive from.","optional":true,"default":"'master'","type":[[["String"]]]}],"returns":{"types":[[["Promise"]]],"description":"The promise from the request. It will be either a stream or an object, depending on whether or not the archive is found."},"meta":{"line":133,"file":"repo.js","path":"src"}},{"name":"getCommits","description":"Gets a list of commits on the repository, based on sha/branch, file path, author, after a date, or before a date. Must be run asynchronously.","examples":["await client.repos('haydennyyy/node-ghapi').getCommits();","await client.repos('haydennyyy/node-ghapi').getCommits({sha: \"Some-file-sha\", author: 'some-user',since: \"2017-02-23T12:33:12Z\"});","await client.repos('haydennyyy/node-ghapi').getCommits({author: \"some-user\"});"],"params":[{"name":"options","description":"The options for the request","optional":true,"type":[[["Object"]]]},{"name":"options.sha","description":"SHA or branch to list commits from.","optional":true,"default":"'master'","type":[[["String"]]]},{"name":"options.path","description":"Optional path to get commits from. Only commits containing this path will be returned.","optional":true,"type":[[["String"]]]},{"name":"options.author","description":"Only commits by this author will be returned. Either email address or login","optional":true,"type":[[["String"]]]},{"name":"options.since","description":"Get commits from after this date. ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ","optional":true,"type":[[["String"]]]},{"name":"options.until","description":"Get commits from before this date. ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ","optional":true,"type":[[["String"]]]}],"meta":{"line":160,"file":"repo.js","path":"src"}},{"name":"getContent","description":"Gets the contents of a file, or files in a folder, in the repository.","examples":["await ghapi.repos('haydennyyy/node-ghapi').getContent('index.js')","await ghapi.repos('haydennyyy/node-ghapi').getContent('src/repo.js')","await ghapi.repos('haydennyyy/node-ghapi').getContent('index.js','master') ","await ghapi.repos('haydennyyy/node-ghapi').getContent('src')"],"params":[{"name":"path","description":"The path of the file in the repo, formatted like '(folder1/folder2/.../)file.ext'","type":[[["String"]]]},{"name":"ref","description":"The name of the commit/branch/tag.","optional":true,"default":"'master'","type":[[["String"]]]}],"meta":{"line":201,"file":"repo.js","path":"src"}},{"name":"releases","description":"Gets the releases for the repository.","examples":["await client.repos('haydennyyy/node-ghapi').releases();","await client.repos('haydennyyy/node-ghapi').releases(1);","await client.repos('haydennyyy/node-ghapi').releases(\"atag\");"],"params":[{"name":"identifier","description":"Assumes it's a tag if it's a string, or an ID if it's a number.","optional":true,"type":[[["Number"]],[["String"]]]}],"returns":[[["Promise","<"],["Object",">"]]],"meta":{"line":219,"file":"repo.js","path":"src"}},{"name":"releaseAssets","description":"Get the assets for a specified release of the repository.","examples":["client.repos('haydennyyy/node-ghapi').releaseAssets(1);"],"params":[{"name":"releaseid","description":"The id of the release to get the assets for.","type":[[["Number"]]]}],"meta":{"line":242,"file":"repo.js","path":"src"}},{"name":"getAsset","description":"Get a specified asset from its id.","examples":["client.repos('haydennyyy/node-ghapi').getAsset(1);"],"params":[{"name":"assetid","description":"The id of the asset to get","type":[[["Number"]]]}],"returns":[[["Promise"]]],"meta":{"line":254,"file":"repo.js","path":"src"}}],"meta":{"line":9,"file":"repo.js","path":"src"}},{"name":"User","description":"User interactivity.","construct":{"name":"User","params":[{"name":"username","description":"The username of the user to get information for.","type":[[["string"]]]},{"name":"token","description":"The authentication token","type":[[["string"]]]}]},"props":[{"name":"raw","description":"Returns the raw JSON from the GitHub API query.","type":[[["Promise","<"],["*",">"]]],"meta":{"line":26,"file":"user.js","path":"src"}},{"name":"repos","description":"Gets a user's repositories.","type":[[["Promise","<"],["*",">"]]],"meta":{"line":35,"file":"user.js","path":"src"}},{"name":"gists","description":"Gets a user's gists.","type":[[["Promise","<"],["*",">"]]],"meta":{"line":44,"file":"user.js","path":"src"}},{"name":"followers","description":"Gets a user's followers by username.","type":[[["Promise","<"],["*",">"]]],"meta":{"line":53,"file":"user.js","path":"src"}},{"name":"starred","description":"Gets repos someone has starred.","type":[[["Promise","<"],["*",">"]]],"meta":{"line":75,"file":"user.js","path":"src"}},{"name":"subscribed","description":"Gets repos someone has subscribed to.","type":[[["Promise","<"],["*",">"]]],"meta":{"line":84,"file":"user.js","path":"src"}},{"name":"orgs","description":"Gets organizations a user is in by username.","type":[[["Promise","<"],["*",">"]]],"meta":{"line":93,"file":"user.js","path":"src"}},{"name":"events","description":"Gets events a user has caused.","type":[[["Promise","<"],["*",">"]]],"meta":{"line":102,"file":"user.js","path":"src"}},{"name":"inboundEvents","description":"Gets events a user has had caused to them.","type":[[["Promise","<"],["*",">"]]],"meta":{"line":111,"file":"user.js","path":"src"}}],"methods":[{"name":"isFollowing","description":"Check if a user is following another user","params":[{"name":"user","description":"The name of the user to check.","type":[[["string"]]]}],"returns":[[["Promise","<"],["Object",">"]]],"meta":{"line":64,"file":"user.js","path":"src"}},{"name":"createRepository","description":"Creates a repository. User must be authenticated.","examples":["client.users('haydennyyy').createRepository('example-repo', {\r  description: 'An example repository created by node-ghapi',\r  homepage: 'https://haydenbjyoung.me',\r  hasWiki: false,\r  licenseTemplate: 'gpl-3.0'\r});"],"params":[{"name":"name","description":"The name of the repository.","type":[[["String"]]]},{"name":"options","description":"Options for repo creation.","optional":true,"type":[[["Object"]]]},{"name":"options.description","description":"A short description of the repository.","optional":true,"type":[[["String"]]]},{"name":"options.homepage","description":"A URL with more information about the repository.","optional":true,"type":[[["String"]]]},{"name":"options.private","description":"Either `true` to create a private repository or `false` to create a public one. Creating private repositories requires a paid GitHub account.","optional":true,"default":false,"type":[[["Boolean"]]]},{"name":"options.hasIssues","description":"Either `true` to enable issues for this repository or `false` to disable them.","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"options.hasProjects","description":"Either true to enable projects for this repository or false to disable them.","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"options.hasWiki","description":"Either `true` to enable the wiki for this repository or `false` to disable it.","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"options.autoInit","description":"Pass `true` to create an initial commit with empty README.","optional":true,"default":false,"type":[[["Boolean"]]]},{"name":"options.gitignoreTemplate","description":"Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \"Haskell\".","optional":true,"type":[[["String"]]]},{"name":"options.licenseTemplate","description":"Choose an open source license template that best suits your needs, and then use the license keyword as the license_template string. For example, \"mit\" or \"mpl-2.0\".","optional":true,"type":[[["String"]]]},{"name":"options.allowSquashMerge","description":"Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"options.allowMergeCommit","description":"Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.","optional":true,"default":true,"type":[[["Boolean"]]]},{"name":"options.allowRebaseMerge","description":"Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.","optional":true,"default":true,"type":[[["Boolean"]]]}],"returns":[[["Promise","<"],["Object",">"]]],"meta":{"line":140,"file":"user.js","path":"src"}}],"meta":{"line":7,"file":"user.js","path":"src"}}],"typedefs":[],"externals":[]}